
@fruit: banana, apple, pear, potato, carrot, peach;
@2d-list: a b c, e f g;

#for-each-fruit {
    .for-each(@value in @fruit) {
        value: @value;
    }
}

#for-each-index-fruit {
    .for-each(@value, @index in @fruit) {
        @{index}: @value;
    }
}

#for-each-inline-list {
    .for-each(@x in @inline-list: a b c) {
        r: @x of @inline-list;
    }
}

#for-each-nested {
    .for-each(@x in @2d-list) {
        .for-each(@y in @x) {
            r: @y of _inspect(@x);
        }
    }
}

#for-each-nested-index {
    .for-each(@x, @i in @2d-list) {
        .for-each(@y, @j in @x) {
            @p:   @i * 10 + @j;
            @{p}: @y;
        }
    }
}

#for-each-nested-scope {
    .for-each(@x, @i in @2d-list) {
        outer-@{i}: outer @x;
        .for-each(@x, @i in @x) {
            inner-@{i}: inner @x;
        }
    }
}

#for-each-nested-lazy-eval {
    .for-each(@x, @i in @2d-list) {
        outer-@{i}: @lazy;
        .for-each(@x, @j in @x) {
            inner-@{j}: @x ~'=' @lazy;
        }
        @lazy: @x;
    }
}

.for-each-guard {
    @a: 1 2 3 4 5;
    .for-each(@x in @a) when (@x = 2),  (@x = 4) {
        a+_: @x;
    }

    @b: 1 a 2 b 3 c 4 d;
    .for-each(@x in @b) when (iskeyword(@x)) {
        b+_: @x;
    }
    
    .for-each(@x in @b) when (isnumber(@x)) {
        c+_: @x;
    }
}

.for-each {
    me: is not a loop;
    .for-each {
        me: is not a loop too;
    }
}
