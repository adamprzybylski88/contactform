// 'screen': selects low-resolution output similar to the Acrobat Distiller "Screen            Optimized" setting.,
// 'ebook':  selects medium-resolution output similar to the Acrobat Distiller                 "eBook" setting,
// 'printer':selects output similar to the Acrobat Distiller "Print Optimized"                  setting,
// 'prepress':selects output similar to Acrobat Distiller "Prepress Optimized"                  setting,
// 'default': selects output intended to be useful across a wide variety of uses,               possibly at the expense of a larger output file

const childProcess = require('child_process');

module.exports = function compressPdf(srcPath, distPath, quality, outputFile) {
	srcPath = srcPath.replace(/\s+/g, '\ ');
	distPath = distPath.replace(/\s+/g, '\ ');
	let qualityArr = ['screen', 'ebook', 'printer', 'prepress', 'default'];
	let setQuality = (qualityArr.indexOf(quality) !== -1) ? quality : 'default';

	var spawn = childProcess.spawn,
		ls = spawn('gs', [
			`-sDEVICE=pdfwrite`,
			`-dCompatibilityLevel=1.4`,
			`-dPDFSETTINGS=/${setQuality}`,
			`-dDownsampleColorImages=true`,
			`-dColorImageResolution=150`,
			`-dNOPAUSE`,
			`-dQUIET`,
			`-dBATCH`,
			`-sOutputFile=${distPath}`,
			`${srcPath}`
		]);

	// ls.stdout.on('data', (chunk) => {
	// 	console.log(`stdout: ${String(chunk)}`);
	// });

	ls.stderr.on('data', (data) => {
		console.log(`stderr: ${String(data)}`);
	});

	ls.on('exit', (code) => {
		outputFile(srcPath, distPath);
	});
}